import mongoose, { Schema } from 'mongoose'
import { OrderItemDocument, OrderDocument } from '../types'

const { ObjectId } = Schema.Types

const orderItemSchema = new Schema(
  {
    //from here data is for seprate item
    amountRefunded: { type: Number, default: 0 },
    awbNumber: { type: String },
    barcode: { type: String },
    brand: { type: ObjectId, ref: 'Brand' },
    brandImg: { type: String },
    brandName: { type: String },
    color: { type: String },
    courierName: { type: String },
    currency: { type: String },
    days: { type: Number, default: 0 },
    description: { type: String },
    expectedDeliveryDate: { type: Date },
    img: { type: String },
    invoiceLink: { type: String },
    itemOrderNo: { type: String },
    mrp: { type: Number },
    name: { type: String },
    options: { type: String },
    orderId: { type: ObjectId, ref: 'Order' },
    orderHistory: [
      {
        body: { type: String },
        icon: { type: String },
        index: { type: Number },
        public: { type: Boolean, default: false },
        status: { type: String },
        time: { type: Date },
        title: { type: String },
      },
    ],
    orderStatus: [{ type: ObjectId, ref: 'OrderStatus' }], // not using anymore
    parentBrand: { type: ObjectId, ref: 'Brand' },
    parentBrandImg: { type: String },
    parentBrandName: { type: String },
    pid: { type: ObjectId, ref: 'Product' },
    posInvoiceNo: { type: String },
    price: { type: Number },
    qty: { type: Number },
    refunds: [{ type: ObjectId, ref: 'Refund' }],
    returnCourierName: { type: String },
    returnReason: { type: String },
    returnTrackingId: { type: String },
    returnValidTill: { type: Date },
    reviewed: { type: Boolean, default: false },
    shippingCharge: { type: Number, default: 0 },
    size: { type: String },
    sku: { type: String },
    slug: { type: String },
    status: { type: String, default: 'Ordered' },
    subtotal: { type: Number },
    tax: { type: Number, default: 0 },
    time: { type: String }, //txTime
    total: { type: Number },
    totalDiscount: { type: Number, default: 0 },
    tracking: { type: String },
    trackingId: { type: String },
    vendor: { type: ObjectId, ref: 'User' },
    vendorInfo: {
      address: Object,
      email: { type: String },
      firstName: { type: String },
      lastName: { type: String },
      phone: { type: String },
      store: { type: String },
    },
    // # for order(same fields for common orderID)
    active: { type: Boolean, default: true },
    address: {
      _id: { type: ObjectId, ref: 'Address' },
      email: { type: String },
      firstName: { type: String },
      lastName: { type: String },
      address: { type: String },
      town: { type: String },
      district: { type: String },
      city: { type: String },
      country: { type: String },
      company: { type: String },
      state: { type: String },
      lat: { type: Number },
      lng: { type: Number },
      zip: { type: Number },
      phone: { type: String },
      deliveryInstructions: { type: String },
      active: { type: Boolean, default: true },
      isResidential: { type: Boolean, default: false },
      uid: { type: ObjectId, ref: 'User' },
    },
    addressId: { type: ObjectId, ref: 'Address' },
    amount: {
      qty: Number,
      subtotal: Number,
      tax: { type: Number, default: 0 },
      discount: Number,
      shipping: Number,
      total: Number,
      totalDiscount: Number,
      currency: String,
      exchangeRate: Number,
      offer: Object,
    },
    amountDue: { type: Number, default: 0 },
    amountPaid: { type: Number, default: 0 },
    cancellationComment: { type: String },
    cancellationReason: { type: String },
    cartId: { type: String },
    codPaid: { type: Number, default: 0 },
    comment: { type: String },
    coupon: { type: Object },
    delivery: { type: Object },
    discount: { type: Number, default: 0 },
    invoiceId: { type: String },
    orderNo: { type: String },
    otp: { type: String },
    paid: { type: Boolean, default: false },
    payment: { type: ObjectId, ref: 'Payment' },
    paymentAmount: { type: Number, default: 0 },
    paymentCurrency: { type: String, default: 'INR' },
    paymentGateway: { type: String }, //razorpay, cashfree, paytm , stripe
    paymentMode: { type: String, default: 'COD' }, // COD  /online
    paymentMsg: { type: String },
    paymentNotes: { type: Object },
    paymentOrderId: { type: String },
    paymentReceipt: { type: String },
    paymentReferenceId: { type: String }, //Transaction Id
    paymentStatus: { type: String, default: 'pending' },
    paymentTime: { type: Date },
    paySuccess: { type: Number, default: 0 }, //paySuccessPageHit
    returnComment: { type: String },
    store: { type: ObjectId, ref: 'Store' },
    totalAmountRefunded: { type: Number, default: 0 },
    type: { type: String },
    user: { type: ObjectId, ref: 'User' },
    userEmail: { type: String },
    userFirstName: { type: String },
    userLastName: { type: String },
    userPhone: { type: String },
  },
  { versionKey: false, timestamps: true }
)
orderItemSchema.index({
  '$**': 'text',
})
export const OrderItem = mongoose.model<OrderItemDocument>(
  'OrderItem',
  orderItemSchema
)
