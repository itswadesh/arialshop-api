import mongoose, { Schema } from 'mongoose'
import { OrderDocument } from '../types'

const { ObjectId } = Schema.Types

const orderSchema = new Schema(
  {
    active: { type: Boolean, default: true },
    address: {
      _id: { type: ObjectId, ref: 'Address' },
      company: { type: String },
      email: { type: String },
      firstName: { type: String },
      lastName: { type: String },
      address: { type: String },
      town: { type: String },
      district: { type: String },
      city: { type: String },
      country: { type: String },
      state: { type: String },
      lat: { type: Number },
      lng: { type: Number },
      zip: { type: Number },
      phone: { type: String },
      deliveryInstructions: { type: String },
      active: { type: Boolean, default: true },
      isResidential: { type: Boolean, default: false },
      uid: { type: ObjectId, ref: 'User' },
    },
    addressId: { type: ObjectId, ref: 'Address' },
    amount: {
      qty: Number,
      subtotal: Number,
      tax: { type: Number, default: 0 },
      discount: Number,
      shipping: Number,
      total: Number,
      currency: String,
      exchangeRate: Number,
      offer: Object,
    },
    amountDue: { type: Number, default: 0 },
    amountPaid: { type: Number, default: 0 },
    totalAmountRefunded: { type: Number, default: 0 },
    cancellationComment: { type: String },
    cancellationReason: { type: String },
    cartId: { type: String },
    codPaid: { type: Number, default: 0 },
    comment: { type: String },
    coupon: { type: Object },
    invoiceId: { type: String },
    orderItems: [{ type: ObjectId, ref: 'OrderItem' }],
    orderNo: { type: String },
    otp: { type: String },
    paid: { type: Boolean, default: false },
    paymentCurrency: { type: String, default: 'INR' },
    paymentGateway: { type: String }, //razorpay, cashfree, paytm , stripe
    payment: { type: ObjectId, ref: 'Payment' },
    paymentMode: { type: String, default: 'COD' }, // COD  /online
    paymentMsg: { type: String },
    paymentNotes: { type: Object },
    paymentOrderId: { type: String },
    paymentReceipt: { type: String },
    paymentReferenceId: { type: String }, //Transaction Id
    paymentStatus: { type: String, default: 'pending' },
    paymentTime: { type: Date },
    paySuccess: { type: Number, default: 0 }, //paySuccessPageHit
    returnComment: { type: String },
    store: { type: ObjectId, ref: 'Store' },
    user: { type: ObjectId, ref: 'User' },
    userFirstName: { type: String },
    userLastName: { type: String },
    userPhone: { type: String },
    userEmail: { type: String },
    items: [
      {
        amountRefunded: { type: Number, default: 0 },
        awbNumber: { type: String },
        barcode: { type: String },
        brand: { type: ObjectId, ref: 'Brand' },
        brandImg: { type: String },
        brandName: { type: String },
        color: { type: String },
        courierName: { type: String },
        currency: { type: String },
        days: { type: Number, default: 0 },
        delivery: {
          type: Object,
          default: { days: 1, received: 0, weight: 0, status: 'Pending' },
        },
        description: { type: String },
        expectedDeliveryDate: { type: Date },
        img: { type: String },
        invoiceLink: { type: String },
        itemOrderNo: { type: String }, // not using
        mrp: { type: Number },
        name: { type: String },
        options: { type: String },
        orderHistory: [
          {
            body: { type: String },
            icon: { type: String },
            index: { type: Number },
            public: { type: Boolean, default: false },
            status: { type: String },
            time: { type: Date },
            title: { type: String },
          },
        ],
        orderStatus: [{ type: ObjectId, ref: 'OrderStatus' }], //not using anymore
        parentBrand: { type: ObjectId, ref: 'Brand' },
        parentBrandImg: { type: String },
        parentBrandName: { type: String },
        pid: { type: ObjectId, ref: 'Product' },
        posInvoiceNo: { type: String },
        price: { type: Number },
        qty: { type: Number },
        refunds: [{ type: ObjectId, ref: 'Refund' }],
        returnCourierName: { type: String },
        returnComment: { type: String },
        returnReason: { type: String },
        returnTrackingId: { type: String },
        returnValidTill: { type: Date },
        reviewed: { type: Boolean, default: false },
        shippingCharge: { type: Number, default: 0 },
        size: { type: String },
        sku: { type: String },
        slug: { type: String },
        status: { type: String, default: 'Ordered' },
        subtotal: { type: Number },
        tax: { type: Number, default: 0 },
        time: { type: String }, //txTime
        total: { type: Number },
        tracking: { type: String },
        trackingId: { type: String },
        type: { type: String },
        vendor: { type: ObjectId, ref: 'User' },
        vendorInfo: {
          address: Object,
          email: { type: String },
          firstName: { type: String },
          lastName: { type: String },
          phone: { type: String },
          store: { type: String },
        },
      },
    ],
  },
  { versionKey: false, timestamps: true }
)
orderSchema.index({
  '$**': 'text',
})
export const Order = mongoose.model<OrderDocument>('Order', orderSchema)
